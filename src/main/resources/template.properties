help=\nWelcome to Class Generator help.\n\nUsage:\n\nFirst parameter: File extension - e.g. .java, .cs.\nRest parameters: File names to be generated - e.g. Customer, Sale.\n\nSample input: .cs Customer\nSample output: CustomerRepositoryTest.cs, CustomerRepositoryNHibernate.cs\n\nThank you for using Class Generator.\n

template.class=public class %1$s {\n\n    public static void %1$s() {\n        System.out.println("%1$s");\n    }\n}
template.map=public class %1$sMap {\n\n    public static void %1$sMap() {\n        System.out.println(\"%1$sMap\");\n    }\n}

template.interface=public interface I%1$sRepository : IRepository<%1$s>\n{\n\n}
template.impl=public class %1$sRepositoryNHibernate : GenericRepository<int, %1$s> : IRepository<%1$s>\n{\n	public %1$sRepositoryNHibernate()\n	{\n		base();\n	}\n}
template.test=public class %1$sRepositoryTest : BaseRepositoryTest<%1$s, %1$sMap, int, %1$sRepositoryNHibernate>  : IRepository<%1$s>\n{\n	public %1$sRepositoryTest()\n	{\n		base();\n	}\n\n	public String getKey(Expression<TFunc, bool> func)\n	{\n		return x => x.getKey();\n	}\n\n	public String setProperty(%1$s entity)\n	{\n		return entity.getName();\n	}\n\n	public void modifyProperty(String s)\n	{\n		entity.name = s;\n	}\n}
