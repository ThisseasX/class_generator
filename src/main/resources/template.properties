help=\nWelcome to Class Generator help.\n\nUsage:\n\nFirst parameter: File extension - e.g. .java, .cs.\nRest parameters: File names to be generated - e.g. Customer, Sale.\n\nSample input: .cs Customer\nSample output: CustomerRepositoryTest.cs, CustomerRepositoryNHibernate.cs\n\nThank you for using Class Generator.\n

template.class=public class %1$s {\n\n    public static void %1$s() {\n        System.out.println("%1$s");\n    }\n}
template.map=public class %1$sMap {\n\n    public static void %1$sMap() {\n        System.out.println(\"%1$sMap\");\n    }\n}

template.interface=using bit8_model.Entities;\nusing bit8_repository_interfaces.Repositories.Interfaces.Base;\n\nnamespace bit8_repository_interfaces.Repositories.Interfaces\n{\n    public interface I%1$sRepository : IRepository<long, %1$s>\n    {\n    }\n}\n
template.impl=using bit8_model.Entities;\nusing bit8_repositories_implementation.Repositories.Base;\nusing bit8_repository_interfaces.Repositories.Interfaces;\nusing bit8_repository_interfaces.Repositories.Interfaces.Base;\n\nnamespace bit8_repositories_implementation.Repositories.Implementation\n{\n    public class %1$sRepositoryNHibernate : RepositoryNhibernate<long, %1$s>, I%1$sRepository\n    {\n        public %1$sRepositoryNHibernate(IUnitOfWork unitOfWork) : base(unitOfWork)\n        {\n        }\n    }\n}\n
template.test=using System;\nusing System.Linq.Expressions;\nusing bit8_model.Entities;\nusing bit8_platform_persistence_testing.Repositories.Base;\nusing bit8_platform_persistence_testing.Repositories.Base.Util;\nusing bit8_repositories_implementation.NHibernateMappings;\nusing bit8_repositories_implementation.SessionFactory;\nusing bit8_repository_interfaces.Repositories.Interfaces;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace bit8_platform_persistence_testing.Repositories\n{\n    [TestClass]\n    public class %1$sRepositoryTest : ReposityTestBase<%1$s, %1$sMap, long, I%1$sRepository>\n    {\n        [ClassInitialize()]\n        public static void Initialize(TestContext testContext)\n        {\n            InitializeBase(testContext);\n        }\n\n        protected override Expression<Func<%1$s, bool>> GetKeyEqualsExpression(long id)\n        {\n            return entity => entity.%1$sId == id;\n        }\n\n        protected override Expression<Func<%1$s, long>> GetKeyExpression()\n        {\n            return entity => entity.%1$sId;\n        }\n\n        protected override object GetModifiedProperty(%1$s entity)\n        {\n            return entity.Name;\n        }\n\n        protected override void ModifyEntity(%1$s entity)\n        {\n            entity.Name = RepositoryBaseTestUtil.ModifyString(entity.Name);\n        }\n\n        protected override CacheRegions? GetCacheRegion()\n        {\n            return CacheRegions.Lottery;\n        }\n    }\n}\n
